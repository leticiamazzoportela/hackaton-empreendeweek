#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackathon:server');
var http = require('http');
const models = require('../models');
const sequelize = models.sequelize;

// função povoar base para teste

function povoarBase() {
  models.Enderecos.create({
    rua: 'brzezinski',
    bairro: 'centro',
    numero: 123,
    quadraLote: 1238,
    complemento: 'casa',
    Cidade: 'cm',
    Estado: 'PR',
  }).then(_endereco => {
    models.Clientes.create({
      Nome: 'Augusto',
      CPF: '55779988',
      RG: '123456',
      Telefone: '456789',
      Email: 'augusto@gmail.com',
      EnderecoIdEnderecos: _endereco.idEnderecos,
    }).then(_cliente => {
      models.Arquivamento.create({
        arquivamento: 'fui roubado pela empresa!',
      }).then(_arquivamento => {
        models.Enquadramento.create({
          area: 'Area que se enquadra',
          assunto: 'assunto geral.',
          problema: 'roubo, preço muito alto',
        }).then(_enquadramento => {
          models.Processos.create({
            historiaOcorrencia: 'testando...',
            status: 'em andamento',
            docApresentados: 'cpf, rg',
            dataHora: '2018-12-10',
            formaAtendimento: 'presencial',
            tipoAtendimento: 'local',
            processo: 'sim',
            EnquadramentoIdEnquadramento: _enquadramento.idEnquadramento,
            ArquivamentoIdEnquadramento: _enquadramento.idEnquadramento,
            ClienteIdClientes: _cliente.idClientes,
          }).then(_processos => {
            models.Enderecos.create({
              rua: 'Irmaos Pereira',
              bairro: 'centro',
              numero: 155,
              quadraLote: 1228,
              complemento: 'predio',
              Cidade: 'cm',
              Estado: 'PR',
            }).then(_enderecoEmpresa => {
              models.Empresas.create({
                nomeFantasia: 'Mercado1',
                CNAE: 'NãoSei',
                cnpj: '554487',
                telefoneCelular: '456789',
                telefoneFixo: '554487',
                razaoSocial: 'tbmNaoSei',
                tipoEmpresa: "MEI",
                email: 'mercado@gmail.com',
                fax: '45678911',
                faturamento: 1000,
                classificacao: 60,
                EnderecoIdEnderecos: _enderecoEmpresa.idEnderecos,
              }).then(_empresa => {
                models.Reclamadas.create({
                  idEmpresas: _empresa.idEmpresas,
                  idProcessos: _processos.idProcessos,
                }).then(_processos2 => {
                  models.Processos.create({
                    historiaOcorrencia: 'testando123...',
                    status: 'em andamento',
                    docApresentados: 'cpf',
                    dataHora: '2018-12-11',
                    formaAtendimento: 'presencial',
                    tipoAtendimento: 'local',
                    processo: 'sim',
                    EnquadramentoIdEnquadramento: _enquadramento.idEnquadramento,
                    ArquivamentoIdEnquadramento: _enquadramento.idEnquadramento,
                    ClienteIdClientes: _cliente.idClientes,
                  }).then(_processo3 => {
                    models.Processos.create({
                      historiaOcorrencia: 'testando123...',
                      status: 'em andamento',
                      docApresentados: 'cpf',
                      dataHora: '2018-12-11',
                      formaAtendimento: 'presencial',
                      tipoAtendimento: 'local',
                      processo: 'sim',
                      EnquadramentoIdEnquadramento: _enquadramento.idEnquadramento,
                      ArquivamentoIdEnquadramento: _enquadramento.idEnquadramento,
                      ClienteIdClientes: _cliente.idClientes,
                    })
                  })
                  
                })

              })
            })
          })
        })
      })
    })
  }).catch(ex => {
    console.log('terminou a primeira parte de povoamento de teste')
  })

}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

sequelize.sync({ force: true })
  .then(() => {
    console.log('Banco criado com sucesso');
    server.listen(port);
    povoarBase();
    server.on('error', onError);
    server.on('listening', onListening);
    console.log('Server ouvindo a porta', port);
  }).catch(ex => {
    console.error('Não foi possível criar o banco de dados', ex);
  });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
